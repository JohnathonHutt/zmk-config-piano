/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>



&mt {
    tapping-term-ms = <251>;
    flavor = "tap-preferred";
 };
&sk {
     release-after-ms = <2000>;
     quick-release;
 };
 
/* Layers */
#define AL1 0
#define AL2 1
#define SM1 2
#define SM2 3
#define NUM 4
#define SYS 5
#define FUN 6
#define AL2U 7
/ { 
    combos {
        compatible = "zmk,combos";
        combo_sys {
            timeout-ms = <30>;
	    key-positions = <3 4 5>;
            bindings = <&to SYS>;
        };
        combo_caps {
            timeout-ms = <30>;
	    key-positions = <10 11 12>;
            bindings = <&caps_word>;
        };
        combo_bt  {
            timeout-ms = <10>;
            key-positions = <11 12>;
            bindings = <&to BT>;
	    layers = <SM1>; 
        };
        lalt {
            timeout-ms = <20>;
	    key-positions = <8 9>;
            bindings = <&kp LALT>; 
	    layers = <SYS>; 
        };
        lclk {
            timeout-ms = <20>;
	    key-positions = <10 11>;
            bindings = <&mkp LCLK>;
	    layers = <SYS>;
        };
        rclk {
            timeout-ms = <20>;
	    key-positions = <3 4>;
            bindings = <&mkp RCLK>;
	    layers = <SYS>;
        };


    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_L";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_R";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        sr: shift_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_LAYER";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&to>;
	    retro-tap;
        };
        hl_l: homerow_layers_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_L";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
        hl_r: homerow_layers_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_LAYERS_R";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
	td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <190>;
            quick-tap-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
	alpha2macro: behavior_macro_1 {
		compatible = "zmk,behavior-macro";
		label = "MACRO1";
		#binding-cells = <0>;
		bindings = < &sl AL2 >;
	};
	caps_alpha2macro: behavior_macro_2 {
		compatible = "zmk,behavior-macro";
		label = "MACRO2";
		#binding-cells = <0>;
		bindings = < &sl AL2U >;
	};
    };

    macros {
    ws_find: ws_find {
        compatible = "zmk,behavior-macro";
        label = "ws_find_macro";
        #binding-cells = <0>;
        bindings =
            <&macro_tap>,
            <&kp LEFT_SHIFT &kp LEFT_SHIFT>;
    };
    prettier: prettier {
        compatible = "zmk,behavior-macro";
        label = "prettier_macro";
        #binding-cells = <0>;
        bindings =
            <&macro_press>,
            <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
            <&macro_release>,
            <&kp LEFT_CONTROL &kp LEFT_ALT &kp O>,
            <&macro_press>,
            <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>,
            <&macro_release>,
            <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp LEFT_ALT &kp P>;
    };
    };
// 				0		1		2					3		4			5
// 		6		7		8		9 					10		11			12 		13
//								14	15 	16 	17		
      keymap {
                compatible = "zmk,keymap";
                
                alpha1 {
                label = "Base";
        bindings = <
                            &hm_l LCTL L    &hm_l LALT G    &hm_l LGUI D                &hm_r RGUI H    &hm_r LALT U        &hm_r RCTL C
            &hl_l NUM A     &hl_l SM2 R     &hl_l SM1 S     &hl_l SYS T                 &hl_r SYS N     &hl_r SM1 E         &hl_r SM2 I     &hl_r NUM O
                                &mt LC(LS(LALT)) SPC        &shrep LSHIFT 0             &caps_alpha2macro     &alpha2macro
        >;
        };
        
                        alpha2 {
                label = "Al2";
        bindings = <
                    &kp V       &kp W               &kp P           &kp M       &kp J                &kp F
        &kp Q       &kp Z       &kp X               &kp B           &kp K       &kp SQT              &kp Y     &kp DOT
                                &sr LSHIFT AL1      &none           &caps_alpha2macro   &to AL1
        >;
        }; 
        

                sym1 {
                label = "Code";
        bindings = <
                   &kp STAR     &kp LS(N3)  &kp DLLR                       &kp LS(COMMA)   &kp LS(DOT)     &kp MINUS
        &kp BSLH   &kp GRAVE    &kp TILDE   &kp CARET                      &kp LBKT        &kp RBKT        &kp PIPE    &kp SLASH
                                &trans      &trans                         &trans          &trans
        >;
        };
        sym2 {
        label = "Punct";
        bindings = <
                    &kp ATSN    &kp QMARK        &prettier                 &kp LPRN    &kp RPRN    &kp LS(MINUS) 
        &kp SEMI    &kp PRCNT   &kp EXCL         &ws_find                  &kp LBRC    &kp RBRC    &kp AMPS    &kp COLON
                                &trans           &trans                    &trans      &trans

        >;
        };

        num {
        label = "Num";
        bindings = <
                          &hm_l LCTL DOT      &hm_l LALT N0   &hm_l LGUI N1       &hm_r RGUI N2   &hm_r LALT N3    &hm_r RCTL N4
        &td SLASH MINUS   &td STAR PLUS       &kp N5          &kp N6              &kp N7          &kp N8           &kp N9         &kp EQUAL
                                              &sr LSHIFT AL1  &bt BT_CLR_ALL      &bt BT_NXT      &kp RGUI
        >;
        };

        sys {
        label = "Nav";
        bindings = <
                            &kp ESC        &kp LG(LS(LBKT))    &kp LG(LS(RBKT))         &kp LA(BKSP)        &kp UP    &kp BKSP
        &kp TAB             &kp DEL        &kp LG(LBKT)        &kp LG(RBKT)             &kp LEFT            &kp DOWN  &kp RIGHT   &kp RET
                                           &sr LSHIFT AL1      &kp LALT                 &kp LSHIFT          &kp RGUI
        >;
        };

        fun {
        label = "Fn";
            bindings = <
                        &kp F11   &kp F10   &kp F1        &kp F2   &kp F3   &kp F4
        &kp C_VOL_DN    &kp F12   &kp F5    &kp F6        &kp F7   &kp F8   &kp F9  &kp C_VOL_UP
                                  &to AL1   &none         &none    &kp C_MUTE
                >;
        };
                alpha2cap {
                label = "Al2Caps";
        bindings = <
                    &kp LS(V)   &kp LS(W)   &kp LS(P)           &kp LS(M)   &kp LS(J)    &kp LS(F) 
        &kp LS(Q)   &kp LS(Z)   &kp LS(X)   &kp LS(B)           &kp LS(K)   &kp DQT      &kp LS(Y)   &kp COMMA
                                &to AL1     &trans              &trans      &out OUT_TOG 
        >;
        };
        
    };
};
